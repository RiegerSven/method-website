---
title: "Confirmatory Factor Analysis (CFA)"
published-title: "Last update on"
date: today
---


## One dimensional CFA model

To estimate the model, we use the data which is simulated [here](data-proc-recode.qmd#sim-3dim). Thereby, we use the observed variables $Y_1,...Y_{4r}$) to construe a latent variable ($\eta$).

::: {.panel-tabset}

### Lavaan

The basic specification in `lavaan` is as follows:

```{r}
#| label: oneDimCfa
oneDimCfa <- "
eta =~ Y1 + Y2 + Y3 + Y4r
"
```

The (standard) model is identification is done by setting the factorloading of the first item indicator ($\lambda_1$) to 1 and the mean of the latent variable ($\eta$) to 0. This is referred as mixture of the reference-group and marker-variable method (see [below](#onedim-ident)). The model is estimated with the `cfa` function.

::: {.callout-note}
Setting the `estimator` argument to `"MLR"` is not necessary because we use simulated data, but in general it is recommended to use robust maximum-likelihood estimation.
:::

```{r}
#| label: read-dat3dim-cfa
#| echo: false
dat3dim <- readRDS("dat3dim.RDS")
```

```{r}
#| label: fitoneDimCfa
fitoneDimCfa <- lavaan::cfa(model = oneDimCfa,
                            data = dat3dim,
                            estimator = "MLR")
```

Retrieve model results with the `summary` function. To get $R^2$, fit measures (e.g., $\chi^2, CFI, RMSEA$ etc.) and the standardized solution, we set the arguments `std`, `rsq` and `fit` to `TRUE`. 

```{r}
#| label: resoneDimCfa
lavaan::summary(fitoneDimCfa,
                std = TRUE,
                rsq = TRUE,
                fit = TRUE)
```

### Mplus

The basic specification in `Mplus` is as follows:

:::

### Identification {#onedim-ident}

@Little2006 describe 3 methods to identify a model:

- Reference-Group Method: fixing the latent mean and the latent variance

- Marker-Variable Method: fixing intercept and loading of one indicator

- Effects-Coding Method: indicator intercepts sum to 0 the set of loadings sum to average 1

::: {.callout-tip collapse="true" appearance="simple"}
## More information about the effects-coding method. {#ident-ecm}

> This method uses the effects constraints to provide an optimal balance across the possible indicators to establish the scale for the estimated parameters, where the average intercept is zero, but no individual manifest intercept is fixed to be zero. Similarly, the loading parameters are estimated as an optimal balance around 1.0, but no individual loading is necessarily constrained to be 1.0. This method results in estimates of the latent variances that are the average of the indicatorsâ€™ variances accounted for by the construct, and the latent means are estimated as optimally weighted averages of the set of indicator means for a given construct. In
other words, the estimated latent variances and latent means reflect the observed metric of the indictors, optimally weighted by the degree to which each indicator represents the underlying latent construct. [@Little2006, p.63]

:::

### Scale Reliability

@Raykov2015

### Measurement invariance across groups

@Meredith1993

@Meredith2006

### Model evaluation

@Hu1999

@Hu1998

@McNeish2021

### Estimating many CFA models

To estimate more than one CFA model, it useful to use loops. To provide all the information, we use character vectors and named lists. To demonstrate how to iteratively estimate many CFA models, the following steps are necessary:

1. Generate character vectors of the respective measures

```{r}
#| label: est-cfa-lists-1
YList <- c(paste0("Y",1:3), "Y4r")
ZList <- c(paste0("Z",1:3), "Z4r")
WList <- c(paste0("W",1:3), "W4r")
```

2. Generate a named list 

```{r}
#| label: est-cfa-lists-2
scaleList <- list(Y = YList, Z = ZList, W = WList)
scaleList
```

3. Write a function

```{r}
#| label: estCFAfunc
estCFA <- function ( items, data ) {
  
  # make code with paste0
  Mod <- paste0("eta", " =~ ",
                paste0("f",1:length(items), "*",
                       items, collapse = " + "))
  
  # estimate the model
  fitMod <- lavaan::cfa(model = Mod,
                        data = data,
                        estimator = "ML")
  
  # extract whatever you want to display
  parm <- lavaan::parameterestimates(fitMod)
  parm <- parm[parm$label != "", c("rhs", "est", "se")]
  
  fitM <- lavaan::fitmeasures(fitMod)
  fitM <- fitM[c("CFI", "RMSEA")]
  
  # return
  fOut <- list(Parameters = parm,
               FitMeasures = fitM,
               FittedObj = fitMod)
  return(fOut)
  
  
}
```


```{r}
#| label: execute-estCFA
#| results: asis
#| layout-ncol: 3

invisible(
lapply(names(scaleList),
       function(x) {
         tempOut <- estCFA(items = scaleList[[x]],
                           data = dat3dim)
         print(
         knitr::kable(
           x = tempOut$Parameters,
           caption = paste0("Factorloadings of measure", x),
           col.names = c("Item", "$\\lambda$", "SE"),
           align = c("r", rep("c", 2)),
           digits = 3
         ) |>
           kableExtra::kable_paper() |>
           kableExtra::add_footnote("Fitmeasures")
         )}))

```


## Multi-dimensional CFA models

## References