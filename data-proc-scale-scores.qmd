---
title: "Computing scale scores"
author: "Sven Rieger"
published-title: "Last update on"
date: today
---

:::{.callout-warning}
This page is work in progress.
:::


## What is a scale score?

```{r}
#| label: read-dat3dim-scalescore
#| echo: false
dat3dim <- readRDS("dat3dim.RDS")
```

some text about scale scores

@Widaman2022

@McNeish2020

@Rose2019



### How to caluclate a scale score?

Before displaying how a scale score is calculated, we generate character vectors and (named) list that contain the names of the items and scales. This is done with the `paste0` and `list` functions (see [(Named) Lists & character vectors](data-proc-nam-lists.qmd)).

The character vectors...

```{r}
#| label: chr-vec-scalescore
YList <- c(paste0("Y",1:3), "Y4r")
ZList <- c(paste0("Z",1:3), "Z4r")
WList <- c(paste0("W",1:3), "W4r")
```

... and the named list.

```{r}
#| label: nam-list-scalescore
scaleList <- list(Y = YList, Z = ZList, W = WList)
scaleList
```

Now, we calculate the scale scores (i.e., $Y_{sum}$, $Y_{avg}$) of the items $Y_1,...Y_{4r}$.

::: {.panel-tabset}

### Approach 1: rowSums {#app1-rowsums}

The `rowSums` function needs one input (copied from the package description):

- `x`: an array of two or more dimensions, containing numeric, complex, integer or logical values, or a numeric data frame.

But the `na.rm` argument needs special attention:

- `na.rm`: logical. Should missing values (including NaN) be omitted from the calculations?


This argument is important when some items have missing data. The question is: Should the scores be build based on the available items (this procedure is called person mean imputation) or discarded? 


@Enders2010 summarizes it as follows (p.51): 

> Until more research accumulates, you should use person mean imputation with caution and should perhaps avoid it altogether, particularly if there are high rates of item nonresponse.

This means, we set `na.rm = FALSE`. It is important to note, that there are other options to circumvent this issue [e.g., model-based estimation of composite scores, see @Rose2019 or multiple imputation, see @Schafer2002]

1. Calculation of the sum score

```{r}
#| label: rowsum-sumscore

dat3dim$Ysum <- rowSums(x = dat3dim[,YList],
                        na.rm = FALSE)

```

2. Calculation of the average score

```{r}
#| label: rowsum-avgcore

dat3dim$Yavg <- rowSums(x = dat3dim[,YList],
                        na.rm = FALSE)/length(YList)

```

### Approach 2: scoreItems function (package: psych)

To calculate scale scores, you can also use the `scoreItems` function from the `psych` package [@R-psych].

The `scoreItems` function needs at least two inputs (copied from the package description):

- `keys`:  list of scoring keys or a matrix or dataframe of -1, 0, or 1 weights for each item on each scale which may be created by hand [...]. Here we assign an equal weight (=1) for all items 
- `items`: Matrix or dataframe of raw item scores

However, there a more input arguments that are important:

- `totals`: if TRUE find total scores (!aka sum scores), if FALSE (default), find average scores
- `missing`: `missing = TRUE` is the normal case and data are imputed according to the impute option. `missing = FALSE`, only complete cases are scored. 

It is recommended to use `missing = FALSE` (see [Approach 1: rowSums](#app1-rowsums)).

Because the function calculates several other statistics (e.g., Cronbachs $\alpha$, average correlation within a scale, ...), we do it in two-step approach. Executing the function and save the information in the object, and then extracting (with the `$` operator) the scores from the object (i.e., `YsumPsych$scores`).

1. Calculation of the sum score

```{r}
#| label: psych-sumscore

YsumPsych <- psych::scoreItems(keys = rep(1, length(YList)),
                               items = dat3dim[,YList],
                               totals = TRUE,
                               missing = FALSE,
                               min = 1,
                               max = 4)

dat3dim$Ysum2 <- as.numeric(YsumPsych$scores)

```

2. Calculation of the average score

```{r}
#| label: psych-avgcore

YavgPsych <- psych::scoreItems(keys = rep(1, length(YList)),
                               items = dat3dim[,YList],
                               totals = FALSE,
                               missing = FALSE,
                               min = 1,
                               max = 4)

dat3dim$Yavg2 <- as.numeric(YavgPsych$scores)


```

:::

### Calculating many scale scores

0. Writing a function

### Generating a table

## References